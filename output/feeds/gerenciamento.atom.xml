<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog GugaBSD</title><link href="http://luizgustavo.pro.br/blog/" rel="alternate"></link><link href="http://luizgustavo.pro.br/blog/feeds/gerenciamento.atom.xml" rel="self"></link><id>http://luizgustavo.pro.br/blog/</id><updated>2014-08-21T08:03:00-03:00</updated><entry><title>Instalação Gitlab no FreeBSD</title><link href="http://luizgustavo.pro.br/blog/2014/08/21/instalacao-gitlab-no-freebsd/" rel="alternate"></link><updated>2014-08-21T08:03:00-03:00</updated><author><name>Luiz Gustavo Costa</name></author><id>tag:luizgustavo.pro.br,2014-08-21:blog/2014/08/21/instalacao-gitlab-no-freebsd/</id><summary type="html">&lt;p&gt;&lt;img alt="Gitlab Logo" src="/blog/images/gitlab_logo.png" title="Gitlab Logo" /&gt;&lt;/p&gt;
&lt;h2&gt;O que é Gitlab ?&lt;/h2&gt;
&lt;p&gt;Gitlab é um gerenciador de repositorio GIT para o ambiente WEB com a maioria das opções oferecidas pelo o Github. Com o Gitlab você terá a oportunidade de ter seu próprio gerenciador de repositorio, no seu ambiente de trabalho. O projeto é desenvolvido em Ruby com o framework Ruby on Rails.&lt;/p&gt;
&lt;p&gt;Veja mais detalhes no site do projeto: https://about.gitlab.org&lt;/p&gt;
&lt;h4&gt;O que vamos usar ?&lt;/h4&gt;
&lt;p&gt;Instalação pura do:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;FreeBSD 10 amd64 - GENERIC&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# uname -a
FreeBSD gitlab.gugabsd 10.0-RELEASE FreeBSD 10.0-RELEASE #0 r260789: Thu Jan 16 22:34:59 UTC 2014     root@snap.freebsd.org:/usr/obj/usr/src/sys/GENERIC  amd64
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Gitlab 7.1 Stable&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;O que vamos precisar ?&lt;/h4&gt;
&lt;p&gt;Vamos usar o gerenciador de pacotes binarios PKG para suprir nossa demanda de pacotes dependentes do Gitlab, para isso, execute o comando abaixo para atualizar o pkg:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gitlab:~ # pkg update

The package management tool is not yet installed on your system.
Do you want to fetch and install it now? [y/N]: y
Bootstrapping pkg from pkg+http://pkg.FreeBSD.org/freebsd:10:x86:64/latest, please wait...
Verifying signature with trusted certificate pkg.freebsd.org.2013102301... done
Installing pkg-1.3.6: 100%
Message for pkg-1.3.6:
 If you are upgrading from the old package format, first run:

  # pkg2ng
Updating repository catalogue
Fetching meta.txz: 100% of 944 B                                                                   
Fetching digests.txz: 100% of 2 MB                                                                  
Fetching packagesite.txz: 100% of 5 MB

Adding new entries: 100%
Incremental update completed, 23436 packages processed:
0 packages updated, 0 removed and 23436 added.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito isto, estamos preparado para instalar os pacotes necessários:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkg install -y git redis icu libxml2 libxslt python2 bash sudo gcc gmake
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para o RVM (veremos abaixo):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkg install -y autoconf automake libtool bison readline libyaml sqlite3 gdbm cmake pkgconf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos ligar nosso servidor Redis:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis_enable=&amp;quot;YES&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/rc.conf
/usr/local/etc/rc.d/redis start
Starting redis.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse tutorial, vou fazer uso do Postgresql como base de dados do Gitlab, porém, o Gitlab também é compativel com Mysql, fica a seu criterio:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkg install -y postgresql92-server
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;postgresql_enable=&amp;quot;YES&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /etc/rc.conf
/usr/local/etc/rc.d/postgresql initdb
/usr/local/etc/rc.d/postgresql start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Crie a base que iremos usar com o Gitlab:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gitlab:~ &lt;span class="c1"&gt;# su - pgsql&lt;/span&gt;
$ psql -d template1
psql &lt;span class="o"&gt;(&lt;/span&gt;9.2.9&lt;span class="o"&gt;)&lt;/span&gt;
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; help.

&lt;span class="nv"&gt;template1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# CREATE USER git CREATEDB;&lt;/span&gt;
CREATE ROLE
&lt;span class="nv"&gt;template1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# CREATE DATABASE gitlabhq_production OWNER git;&lt;/span&gt;
CREATE DATABASE
&lt;span class="nv"&gt;template1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="c1"&gt;# \q&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como vamos "enjaular" tudo em um usuário do sistema, vamos cria-lo no FreeBSD com o comando abaixo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pw add user -n git -m -s /usr/local/bin/bash -c &amp;quot;GitLab&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E com o usuário criado, vamos fazer o uso do Ruby, que é a linguagem de construção do Gitlab através do RVM. Para isto, vamos virar usuário &lt;code&gt;git&lt;/code&gt; e instalar o ambiente do RVM com uma versão do ruby:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gitlab:~ # su - git
[git@gitlab ~]$ 
[git@gitlab ~]$ \curl -sSL https://get.rvm.io | bash -s stable

source /home/git/.rvm/scripts/rvm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora, instalar o Ruby 2.1.2 necessário para o Gitlab 7.1:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rvm install 2.1.2

...

Install of ruby-2.1.2 - &lt;span class="c1"&gt;#complete&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto, já estamos com o ambiente com Ruby instalado e preparado para implementar o Gitlab.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;git@gitlab ~&lt;span class="o"&gt;]&lt;/span&gt;$ which ruby
/home/git/.rvm/rubies/ruby-2.1.2/bin/ruby
&lt;span class="o"&gt;[&lt;/span&gt;git@gitlab ~&lt;span class="o"&gt;]&lt;/span&gt;$ ruby -v
ruby 2.1.2p95 &lt;span class="o"&gt;(&lt;/span&gt;2014-05-08 revision 45877&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;x86_64-freebsd10.0&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Veja mais informações sobre o projeto RVM em: http://rvm.io/&lt;/p&gt;
&lt;h4&gt;Começamos então a clonar o repositorio do Gitlab:&lt;/h4&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd
git clone https://gitlab.com/gitlab-org/gitlab-ce.git -b 7-1-stable gitlab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E então, começar a configurar o Gitlab:&lt;/p&gt;
&lt;p&gt;Copie o arquivo de exemplo do Gitlab:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /home/git/gitlab
cp config/gitlab.yml.example config/gitlab.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;ee config/gitlab.yml&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Altere a entrada &lt;code&gt;localhost&lt;/code&gt; para o hostname/dominio completo do seu servidor, por exemplo: &lt;code&gt;gitlab.mundounix.com.br&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se for usar https, altere a porta de escuta de 80 para 443&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corriga o path do usuário git no arquivo de configuração para o formato &lt;code&gt;/usr/home/git&lt;/code&gt;, já que o Gitlab não se da bem com links simbolicos. Faça isso nas linhas: 199, 208, 211, 212 do arquivo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Atualize o cominho do binario do git para o padrão do FreeBSD: &lt;code&gt;/usr/local/bin/git&lt;/code&gt; na linha 225&lt;/p&gt;
&lt;p&gt;cp config/unicorn.rb.example config/unicorn.rb&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ee config/unicorn.rb&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Habilite o modo "cluster" se você tiver muito acesso, aumentando o número de "workes" de acordo com a carga do seu servidor (CPU, Memória, etc)&lt;/p&gt;
&lt;p&gt;cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Habilite a configuração da base de dados do Postgresql:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp config/database.yml.postgresql config/database.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Configure uma conta global do GIT para o usuario git do sistema:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global user.name &amp;quot;GitLab&amp;quot;
git config --global user.email &amp;quot;exemplo@exemplo.com&amp;quot;
git config --global core.autocrlf input
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Acertando algumas permissões:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chown -R git log/
chown -R git tmp/
chmod -R u+rwX log/
chmod -R u+rwX tmp/
chmod -R u+rwX tmp/pids/
chmod -R u+rwX tmp/sockets/
chmod -R u+rwX  public/uploads
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Criando diretorios para "satellites":&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /home/git/gitlab-satellites
chmod u+rwx,g&lt;span class="o"&gt;=&lt;/span&gt;rx,o-rwx /home/git/gitlab-satellites
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos agora instalar os pacotes &lt;code&gt;Gems&lt;/code&gt;, que são uma série de libs do Ruby necessárias para o Gitlab funcionar, usando a ferramenta bundle:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem install bundle

&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CC&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gcc47
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CXX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;c++47
&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;CPP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cpp47

bundle install --deployment --without development &lt;span class="nb"&gt;test&lt;/span&gt; mysql aws
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Instalação do Gitlab Shell&lt;/h2&gt;
&lt;p&gt;GitLab Shell é um software de acesso ssh e gerenciamento de repositório desenvolvido especialmente para GitLab.&lt;/p&gt;
&lt;p&gt;Vá para o diretorio de instalação do Gitlab:
&lt;code&gt;cd /home/git/gitlab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Rode uma tarefa de instalação do gitlab-shell:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle exec rake gitlab:shell:install[v1.9.6] REDIS_URL=redis://localhost:6379 RAILS_ENV=production

# Por padrão, a configuração gitlab-shell é gerado a partir de sua configuração do gitlab principal. 
# 
# Nota: Ao usar GitLab com HTTPS por favor alterar o seguinte: 
# - Fornecer caminhos para os certificados ca_file e ca_path. 
# - A opção &amp;quot;gitlab_url&amp;quot; deve apontar para o https do GitLab. 
# - No caso de você estiver usando o certificado auto-assinado, altere a opção &amp;quot;self_signed_cert&amp;quot; para &amp;quot;true&amp;quot;. 
# Você pode rever (e modificar) a configuração gitlab-shell da seguinte forma: 
ee /usr/home/git/gitlab-shell/config.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Não esqueça ainda de alterar nesse arquivo de configuração o path (caminho) do usuário &lt;em&gt;git&lt;/em&gt;, de &lt;code&gt;/home/git&lt;/code&gt; para &lt;code&gt;/usr/home/git&lt;/code&gt; na linha 7 do arquivo.&lt;/p&gt;
&lt;p&gt;Vamos agora inicializar a base de dados:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle exec rake gitlab:setup RAILS_ENV=production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Verifique se esta tudo ok:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle exec rake gitlab:env:info RAILS_ENV=production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Configure o cache de componentes web da interface (assets):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bundle exec rake assets:precompile RAILS_ENV=production
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pronto ! Gitlab configurado, precisamos agora configurar a inicilização do mesmo:&lt;/p&gt;
&lt;p&gt;Como root (saia do /home do git -&amp;gt; &lt;code&gt;exit&lt;/code&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /usr/home/git/gitlab/lib/support/init.d/gitlab /usr/local/etc/rc.d/gitlab.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito isso, vamos inicializar o Gitlab:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@gitlab:~ &lt;span class="c1"&gt;# /usr/local/etc/rc.d/gitlab.sh start&lt;/span&gt;
Starting both the GitLab Unicorn and Sidekiq.
The GitLab Unicorn web server with pid &lt;span class="m"&gt;36244&lt;/span&gt; is running.
The GitLab Sidekiq job dispatcher with pid &lt;span class="m"&gt;36271&lt;/span&gt; is running.
GitLab and all its components are up and running.

root@gitlab:~ &lt;span class="c1"&gt;# ps ax |grep ruby&lt;/span&gt;
&lt;span class="m"&gt;36244&lt;/span&gt;  -  S      0:10.35 ruby: unicorn_rails master -D -c /home/git/gitlab/config/unicorn.rb -E prod
&lt;span class="m"&gt;36248&lt;/span&gt;  -  S      0:00.00 ruby: unicorn_rails worker&lt;span class="o"&gt;[&lt;/span&gt;0&lt;span class="o"&gt;]&lt;/span&gt; -D -c /home/git/gitlab/config/unicorn.rb -E p
&lt;span class="m"&gt;36249&lt;/span&gt;  -  S      0:00.00 ruby: unicorn_rails worker&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt; -D -c /home/git/gitlab/config/unicorn.rb -E p
&lt;span class="m"&gt;36271&lt;/span&gt;  -  Ss     0:10.15 ruby: sidekiq 2.17.0 gitlab &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; of &lt;span class="m"&gt;25&lt;/span&gt; busy&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;ruby&lt;span class="o"&gt;)&lt;/span&gt;

root@gitlab:~ &lt;span class="c1"&gt;# sockstat -4l&lt;/span&gt;
USER     COMMAND    PID   FD PROTO  LOCAL ADDRESS         FOREIGN ADDRESS      
git      ruby       &lt;span class="m"&gt;36249&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; tcp4   127.0.0.1:8080        *:*
git      ruby       &lt;span class="m"&gt;36248&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; tcp4   127.0.0.1:8080        *:*
git      ruby       &lt;span class="m"&gt;36244&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; tcp4   127.0.0.1:8080        *:*
pgsql    postgres   &lt;span class="m"&gt;11726&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;  tcp4   127.0.0.1:5432        *:*
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos agora configurar um front para nosso Gitlab e para essa tarefa, vamos usar o Nginx. Porém, se você estiver familiarizado com outro servidor web, você poderá também configura-lo, basta consultar o endereço abaixo para mais informações:&lt;/p&gt;
&lt;p&gt;https://gitlab.com/gitlab-org/gitlab-recipes/&lt;/p&gt;
&lt;p&gt;Vamos instalar o NGINX:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkg install -y nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copie agora o arquivo de configuração pronto do Gitlab para NGINX:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp /usr/home/git/gitlab/lib/support/nginx/gitlab /usr/local/etc/nginx/gitlab.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Altere o arquivo de acordo com o seu hostname. &lt;em&gt;Isso é importante !&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Na linha 59, altere a entrada do proxy_pass para o endereço interno do Gitlab: http://127.0.0.1:8080;&lt;/li&gt;
&lt;li&gt;Na linha 68, comente a entrada "gzip_static on;" colocando um "#" na frente. A versão do nginx compilada para o repositorio pkg não vem com suporte a gzip. Opcionalmente você poderá ativar isso compilando a versão do nginx para o ports.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adicione agora no arquivo /usr/local/etc/nginx/nginx.conf, antes do ultimo "}", na linha 117, o include para nosso arquivo de configuração do Gitlab:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;include /usr/local/etc/nginx/gitlab.conf;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alguns diretorios necessários para nosso ambiente:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p /var/tmp/nginx /var/log/nginx
chown -R www: /var/log/nginx /var/tmp/nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E podemos agora configurar a inicialização do NGINX:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# echo &amp;#39;nginx_enable=&amp;quot;YES&amp;quot;&amp;#39; &amp;gt;&amp;gt; /etc/rc.conf&lt;/span&gt;
&lt;span class="c1"&gt;# service nginx start&lt;/span&gt;
Performing sanity check on nginx configuration:
nginx: the configuration file /usr/local/etc/nginx/nginx.conf syntax is ok
nginx: configuration file /usr/local/etc/nginx/nginx.conf &lt;span class="nb"&gt;test&lt;/span&gt; is successful
Starting nginx.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora estamos com a configuração completa ! basta apontar seu navegador para o endereço do servidor e se logar com as credenciais padrões de inicialização:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root
5iveL!fe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;É isso, qualquer dúvida, comente abaixo.&lt;/p&gt;
&lt;p&gt;Referencias:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/gitlab-org/gitlab-ce/blob/7-1-stable/doc/install/installation.md"&gt;https://gitlab.com/gitlab-org/gitlab-ce/blob/7-1-stable/doc/install/installation.md&lt;/a&gt;&lt;/p&gt;</summary><category term="Gitlab"></category><category term="Freebsd"></category></entry></feed>